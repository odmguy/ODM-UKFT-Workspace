/**
 * @author Andrew Macdonald, IBM UK Ltd.
 *
 */
package metadata;

/***
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import baca.Block;
***/

import java.util.Date;
import java.util.Vector;
import ilog.rules.bom.annotations.*;
import com.fasterxml.jackson.annotation.JsonIgnore;


public class ODMResponse {

	// -- Fields essentially copied from CA results
	public double ocrAccuracy;
	public String analyzerID = ""; // -- UUID Generated by BACA when the doc is uploaded
	public String documentName = ""; // --
	public int documentNumPages = 0;
	public String documentClassification = ""; // -- Identified by BACA, maybe changed by rules
	public String documentClassificationConfidence = "";
	public Date processingDate = new Date(); // -- Date the rule processing was run

	@NotBusiness public boolean missingValuesAsNulls = false; 

	// -- Rule Extraction Fields
	public String overallResult = "";
	public boolean errorsOccurred = false;
	public Vector<DataItem> dataItemList;
	public Vector<String> messages;

	// ------------- CONSTRUCTOR --------------
	public ODMResponse() {
		messages = new Vector<String>();
		dataItemList = new Vector<DataItem>();
	}

	// -------- Utility Methods -----------------
	@JsonIgnore //@NotBusiness
	public static String getNewUUID() {
		return java.util.UUID.randomUUID().toString();
	}
	
	// --------------------------------------------
	// -- GET the DataItem object for the the specified key
	// -- returns null if not found which could cause an NPE if not checked
	// --------------------------------------------
	@JsonIgnore
	public DataItem getDataItem(@BusinessName("key") String key) {
		// -- @BusinessVerbalisation("the data item {0} in {this}")

		// -- No Keys yet so return nothing
		if (dataItemList.size() == 0) {
			return null;
		}

		// -- If the KEY is found then return the Data ITem
		for (DataItem item : dataItemList) {
			if (item.key.equals(key)) {
				return item;
			}
		}
		return null;
	}

	// --------------------------------------------
	// -- GET the value associated with the specified key
	// --------------------------------------------
	@JsonIgnore
	public String getDataItemValue(@BusinessName("key") String key) {
		// -- @BusinessVerbalisation("the data item {0} value in {this}")

		// -- No Keys yet so return nothing
		if (dataItemList.size() == 0) {
			if (missingValuesAsNulls) {
				return null;
			} else {
				return "";
			}
		}

		// -- If the KEY is found then return the associated VALUE
		DataItem item = getDataItem(key);
		if (item != null) {
			return item.value;
		} else {  // -- Not found so return nothing
			if (missingValuesAsNulls) {
				return null;
			} else {
				return "";
			}
		}
	}

	// --------------------------------------------
	// -- SET the key with the specified value 
	// --------------------------------------------
	public void setDataItemValue(@BusinessName("key") String key, @BusinessName("value") String value) {
		// -- @BusinessVerbalisation("set data item {0} value to {1} in {this}")

		DataItem item = getDataItem(key);
		// -- Item does not exist so add a new item with the value
		if (item == null) {
			item = new DataItem(key, value);
			item.confidence = "high"; // -- TODO Is this the best default to use????
			dataItemList.add(item);
		} else {
			// -- Item already exists so replace the value
			item.value = value;
			item.confidence = "high"; // -- TODO Is this the best default to use????
		}
	}
	
	// --------------------------------------------
	// -- SET the details of the specified key 
	// --------------------------------------------
	public void setDataItemDetails(@BusinessName("key") String key, 
									@BusinessName("location") String location,
									@BusinessName("confidence") String confidence, 
									@BusinessName("comment") String comment) {
		// -- @BusinessVerbalisation("set data item {0} location to {1} confidence to {2} comment to {3} in {this}")
		DataItem item = getDataItem(key);
		if (item == null) {
			// -- Item does not exist so add a new item with empty value
			item = new DataItem(key, "");
			item.location = location;
			item.confidence = confidence;
			item.comment = comment;
			dataItemList.add(item);
//			messages.add("### Set details of NEW " + key + " to " + location + confidence + comment);
		} else {
			// -- Item exists so set the details
			item.location = location;
			item.confidence = confidence;
			item.comment = comment;
//			messages.add("### Set details of Existing " + key + " to " + location + confidence + comment);
		}
	}
		
	// --------------------------------------------
	// -- GET the value associated with the specified key as a number
	// --------------------------------------------
	public double getItemValueAsNumber(@BusinessName("key") String key) {
		// -- Manual BOM Verbalisation: the data item value numeric {0} of {this}
		String value = getDataItemValue(key);
		if ( isEmpty(value) ) {
			return -999.999; // -- TODO what to do here??
		}
		try {
			double d = Double.parseDouble(value);
			return d;
		} catch (NumberFormatException nfe) {
			return -999.999;
		}
	}

	// --------------------
	private boolean isEmpty(String value) {
		if (value == null | value.equals(""))
			return true;
		else
			return false;
	}
	
	
	public void exportDataToFile(String filename) {
		// -- Not exposed in the BOM by default as you may wish to hide it in the
		// Ruleflow End task
/************
		boolean debug = false;
		if (debug) System.out.println("~~~ MetaData.exportDataToFile: Exporting data to " + filename);

		// -- Open the file
		try {
			OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(filename), "UTF-8");

			// -- Write Dynamic Parameters
			if (dynamicParams != null && !dynamicParams.isEmpty() && dynamicParams.contains(VALUE_SEPARATOR)) {
				if (debug)
					System.out.println("~~~ MetaData.exportDataToFile: Detected Parameters = " + dynamicParams);
				String[] pairs = dynamicParams.split("\\" + PAIR_SEPARATOR);

				// -- Write the Key/Value pairs out one line each
				for (int p = 0; p < pairs.length; p++) {
					String[] kvp = pairs[p].split(VALUE_SEPARATOR);
					writer.write(kvp[0] + ",");
					if (kvp.length > 1) { // -- This should not be needed unless a pair separator is missing
						if (kvp[1].contains(","))
							writer.write("\"" + kvp[1] + "\""); // -- wrap a value containing a comma in double quotes
						else {
							if (kvp.length > 1)
								writer.write(kvp[1]);
						}
					}

					writer.write("\r\n");

				}

				writer.write("\r\n");
				writer.write("\r\n");
			}

			// ------- Write Rule Messages ---------------
			writer.write("\r\n\r\nRule Information Messages:\r\n");
			Iterator<String> msgIter = ruleMessages.iterator();
			while (msgIter.hasNext()) {
				String msg = msgIter.next();
				if (msg.contains(","))
					writer.write("\"" + msg + "\"\r\n"); // -- wrap a value containing a comma in double quotes
				else
					writer.write(msg + "\r\n");
			}

			writer.close();

		} catch (IOException e) {
			System.out.println("~~~ MetaData.exportDataToFile: Could not open Export file - " + filename
					+ "\n   It's probably already open in Excel or in a non-writable folder.");
//				e.printStackTrace();
		}

		if (debug)
			System.out.println("~~~ MetaData.exportDataToFile: Finshed exporting data");
		return;
**************/
	}

	
}
