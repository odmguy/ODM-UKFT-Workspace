<?xml version="1.0" encoding="UTF-8"?>
<ilog.rules.studio.model.ruleflow:RuleFlow xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ilog.rules.studio.model.ruleflow="http://ilog.rules.studio/model/ruleflow.ecore">
  <name>Ruleflow</name>
  <uuid>af2db780-7ee3-4680-92f7-1a772886657b</uuid>
  <locale>en_US</locale>
  <categories>any</categories>
  <rfModel>
<Ruleflow xmlns="http://schemas.ilog.com/Rules/7.0/Ruleflow">
  <Body>
    <TaskList>
      <StartTask Identifier="task_0">
        <Actions Language="irl"><![CDATA[System.out.println("\n### Starting ContentAnalyzer / ProcessUKFTDocument service - "+projectVersion);
if (odmResponse_out == null) odmResponse_out = new ODMResponse();
// -- Copy important CA fields to Response object
odmResponse_out.analyzerID = document_in.analyzerId;
odmResponse_out.documentName = document_in.DocumentName + "." + document_in.DocumentExtension;
odmResponse_out.documentNumPages = document_in.ExtraInformation.pages;
odmResponse_out.documentClassification = document_in.Classification.DocumentClass.Actual;
odmResponse_out.documentClassificationConfidence = document_in.Classification.DocumentClass.ClassMatch;
if (document_in.DSOutput.length > 0) odmResponse_out.ocrAccuracy = document_in.DSOutput[0].OCRAccuracy;

System.out.println("\n    Document_in.DocumentName = ["+ odmResponse_out.documentName +"]"); 
System.out.println("    Meta-Data Analyser ID= "+ odmResponse_out.analyzerID); 	
System.out.println("    Incoming document num pages = "+ odmResponse_out.documentNumPages); 
//System.out.println("    Content Analyzer Classification = "+ odmResponse_out.documentClassification); 
page1 = document_in.pageList[0];  // -- This saves having to search every page for every rule when often you only need the first page


if (false) {  // ------ Print some debugging details of the incoming JSON Content Analyzer payload ------------
	for (int page=0; page < document_in.pageList.length; page++) {
		if (page < 3) {
			System.out.println("    Page "+ page + " has:");
			System.out.println("        Num KVPs = "+ document_in.pageList[page].KVPTable.length );
			for (int kvp = 0; kvp <  document_in.pageList[page].KVPTable.length; kvp ++) {
				if ( document_in.pageList[page].KVPTable[kvp].KeyClassConfidence.equals("High") )
						System.out.println("          -  "+ document_in.pageList[page].KVPTable[kvp].KeyClass + " - "+document_in.pageList[page].KVPTable[kvp].KeyClassConfidence +" = "+ document_in.pageList[page].KVPTable[kvp].Value);
			}
		}  // -- end if page < 3 which was added to reduce messages in log

		// -- Print out some TableLineItems Details		---
		if (document_in.pageList[page].TableLineItems.length > 0) {
				System.out.println("    Page "+ page + " has has some TableLineItems");
				for (int litable = 0;    litable <  document_in.pageList[page].TableLineItems.length;   litable ++) {
					int numcols = document_in.pageList[page].TableLineItems[litable].LineItemGroups[0].Headers.length ;
					System.out.println("       Table  "+ litable + " has "+ numcols   + " header Columns");
					String headers = "        ";
					for (int col = 0;    col < numcols;   col ++) {
						headers = headers + document_in.pageList[page].TableLineItems[litable].LineItemGroups[0].Headers[col] + "  |  ";
					}
					System.out.println(headers+"\n");
				}
		}
	}
}
System.out.println("------------ Executing Rules ------------------------");
]]></Actions>
      </StartTask>
      <RuleTask ExecutionMode="Sequential" ExitCriteria="None" Identifier="Initial Processing" Ordering="Default">
        <RuleList>
          <Package Name="1-Inital Processing"/>
        </RuleList>
      </RuleTask>
      <RuleTask ExecutionMode="Sequential" ExitCriteria="None" Identifier="All Document rules" Ordering="Default">
        <RuleList>
          <Package Name="2-All Document Rules"/>
        </RuleList>
      </RuleTask>
      <RuleTask ExecutionMode="Sequential" ExitCriteria="None" Identifier="Final Checks" Ordering="Default">
        <RuleList>
          <Package Name="5-Final Checks"/>
        </RuleList>
      </RuleTask>
      <RuleTask ExecutionMode="Sequential" ExitCriteria="None" Identifier="Document Specific rules" Ordering="Default">
        <Select Dynamic="true" Language="bal"><![CDATA[the business name of the package name of 'the rule' contains the document classification of 'the response' ]]></Select>
      </RuleTask>
      <StopTask Identifier="task_2">
        <Actions Language="irl"><![CDATA[System.out.println("------------ Finished executing rules ----------------------");
//odmResponse_out.exportDataToFile(dataOutputDirectory+"/"+odmResponse_out.documentName+".data" );
System.out.println("### Ended CA Process Document Ruleflow");
System.out.println("   OverallResult = "+odmResponse_out.overallResult);
System.out.println("   Errors Occurred = "+odmResponse_out.errorsOccurred);

odmResponse_out.processingDate = null;  // -- TEMP TEST to remove this from the response JSON to see if it fixes BAW parse issue

/**************************
System.out.println("   ruleMessages[] = ");
Iterator iter = odmResponse_out.messages.iterator();
while (iter.hasNext() ) {
	System.out.println("    - "+iter.next());
}

System.out.println("   Number of Data Items = "+odmResponse_out.dataItemList.size() );
 iter = odmResponse_out.dataItemList.iterator();
while (iter.hasNext() ) {
	DataItem item = (DataItem) iter.next();
	System.out.println("    - "+item.key+" = "+item.value+" with "+ item.confidence+" confidence at location - "+item.location);
}
*******************/]]></Actions>
      </StopTask>
    </TaskList>
    <NodeList>
      <TaskNode Identifier="node_3" Task="task_2"/>
      <TaskNode Identifier="node_1" Task="Initial Processing"/>
      <TaskNode Identifier="node_4" Task="All Document rules"/>
      <TaskNode Identifier="node_8" Task="Final Checks"/>
      <TaskNode Identifier="node_2" Task="Document Specific rules"/>
      <TaskNode Identifier="node_0" Task="task_0"/>
    </NodeList>
    <TransitionList>
      <Transition Identifier="transition_1" Source="node_1" Target="node_4"/>
      <Transition Identifier="transition_9" Source="node_8" Target="node_3"/>
      <Transition Identifier="transition_2" Source="node_4" Target="node_2"/>
      <Transition Identifier="transition_3" Source="node_2" Target="node_8"/>
      <Transition Identifier="transition_0" Source="node_0" Target="node_1"/>
    </TransitionList>
  </Body>
  <Resources>
    <ResourceSet Locale="en_US">
      <Data Name="node_4#width">184.05727</Data>
      <Data Name="node_2#height">40.00003</Data>
      <Data Name="node_3#height">19.0</Data>
      <Data Name="node_1#height">40.0</Data>
      <Data Name="node_4#height">40.0</Data>
      <Data Name="node_8#x">103.4985</Data>
      <Data Name="node_0#height">21.0</Data>
      <Data Name="node_8#y">361.00006</Data>
      <Data Name="node_2#name">node_1</Data>
      <Data Name="node_8#height">40.0</Data>
      <Data Name="node_2#width">206.99701</Data>
      <Data Name="node_0#width">21.0</Data>
      <Data Name="node_3#y">440.50006</Data>
      <Data Name="node_4#x">103.4985</Data>
      <Data Name="node_4#y">181.0</Data>
      <Data Name="node_0#x">103.498474</Data>
      <Data Name="node_1#x">103.498505</Data>
      <Data Name="node_8#name">node_8</Data>
      <Data Name="node_0#y">9.699997</Data>
      <Data Name="node_1#y">91.0</Data>
      <Data Name="node_2#x">102.99851</Data>
      <Data Name="node_3#x">103.49848</Data>
      <Data Name="node_2#y">271.0</Data>
      <Data Name="node_1#name">node_1</Data>
      <Data Name="node_3#width">18.999985</Data>
      <Data Name="node_4#name">node_4</Data>
      <Data Name="node_8#width">145.64462</Data>
      <Data Name="node_1#width">170.3158</Data>
      <Data Name="node_0#name">node_0</Data>
      <Data Name="node_3#name">node_2</Data>
    </ResourceSet>
  </Resources>
  <Properties>
    <imports><![CDATA[import baca.Document;
use document_in;
import java.util.Iterator;
use projectVersion;
use dataOutputDirectory;
use odmResponse_out;
import metadata.ODMResponse;
import metadata.DataItem;
use page1;
]]></imports>
  </Properties>
</Ruleflow>
</rfModel>
</ilog.rules.studio.model.ruleflow:RuleFlow>
